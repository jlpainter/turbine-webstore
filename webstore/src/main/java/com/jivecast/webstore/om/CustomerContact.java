/*
 *  ------------------------------------------------------------------
 *  JiveCast
 *  301 Fayetteville St Unit 2301
 *  Raleigh, NC 27601
 *  https://jivecast.com
 *
 *  Copyright (c) 2018-2025 JiveCast. All Rights Reserved.
 *
 *  THE PROGRAM IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EITHER EXPRESSED OR IMPLIED, INCLUDING, WITHOUT
 *  LIMITATION, WARRANTIES THAT THE PROGRAM IS FREE OF
 *  DEFECTS, MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE OR
 *  NON-INFRINGING. THE ENTIRE RISK AS TO THE QUALITY AND
 *  PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD ANY PART
 *  OF THE PROGRAM PROVE DEFECTIVE IN ANY RESPECT, YOU
 *  (NOT JIVECAST) ASSUME THE COST OF ANY NECESSARY SERVICING,
 *  REPAIR OR CORRECTION. THIS DISCLAIMER OF WARRANTY CONSTITUTES
 *  AN ESSENTIAL PART OF THIS LICENSE. NO USE OF
 *  THE PROGRAM IS AUTHORIZED HEREUNDER EXCEPT
 *  UNDER THIS DISCLAIMER.
 *
 *  ------------------------------------------------------------------
 */

package com.jivecast.webstore.om;

import java.util.List;
import java.util.Vector;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.torque.criteria.Criteria;
import org.apache.torque.util.CountHelper;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Wed Apr 22 12:23:37 EDT 2020]
 *
 * You should add additional methods to this class to meet the application
 * requirements. This class will only be generated as long as it does not
 * already exist in the output directory.
 */

public class CustomerContact extends com.jivecast.webstore.om.BaseCustomerContact {
	/** Serial version */
	private static final long serialVersionUID = 1587572617352L;

	private static Log log = LogFactory.getLog(CustomerContact.class);

	public static List<CustomerContact> getAllMessages() {
		try {
			Criteria criteria = new Criteria();
			criteria.addDescendingOrderByColumn(CustomerContactPeer.REF_ID);
			return (List<CustomerContact>) CustomerContactPeer.doSelect(criteria);
		} catch (Exception e) {
			log.error("Error getting all messages: " + e.toString());
			return null;
		}
	}


	/**
	 * Get the event logs using pagination method
	 */
	public static List<CustomerContact> getAllMessages(int limit, int idx) {
		// int limit = 5;
		List<CustomerContact> events = new Vector<CustomerContact>();

		try {
			Criteria criteria = new Criteria();
			// Newest to oldest
			criteria.addDescendingOrderByColumn(CustomerContactPeer.SEND_DATE);
			List<CustomerContact> history = (List<CustomerContact>) CustomerContactPeer.doSelect(criteria);

			// Paginate the results
			int startId = 0;
			int endId = 0;
			int currId = 0;

			// Check index size
			if (history.size() > limit) {
				// Set the start and end ID
				startId = limit * idx;
				endId = startId + limit;
				for (CustomerContact h : history) {
					if (startId <= currId && currId < endId) {
						events.add(h);
					}
					currId++;
				}

			} else {
				for (CustomerContact h : history)
					events.add(h);
			}

			return events;
		} catch (Exception e) {
			return null;
		}
	}

	/**
	 * Determine number of pages to show the posts
	 * 
	 * @param product_key
	 * @return
	 */
	public static List<Integer> getEventPages(int limit) {
		try {
			List<Integer> pages = new Vector<Integer>();

			// setup basic criteria
			Criteria criteria = new Criteria();
			criteria.where(CustomerContactPeer.REF_ID, 0, Criteria.GREATER_EQUAL);
			criteria.setDistinct();

			CountHelper counter = new CountHelper();
			int count = counter.count(criteria, CustomerContactPeer.REF_ID);
			int page_count = (int) Math.ceil(count / limit) + 1;
			for (int i = 0; i < page_count; i++)
				pages.add(i);
			return pages;
		} catch (Exception e) {
			return null;
		}
	}	
	
}
