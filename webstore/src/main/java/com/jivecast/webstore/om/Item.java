/*
 *  ------------------------------------------------------------------
 *  JiveCast
 *  301 Fayetteville St Unit 2301
 *  Raleigh, NC 27601
 *  https://jivecast.com
 *
 *  Copyright (c) 2018-2025 JiveCast. All Rights Reserved.
 *
 *  THE PROGRAM IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EITHER EXPRESSED OR IMPLIED, INCLUDING, WITHOUT
 *  LIMITATION, WARRANTIES THAT THE PROGRAM IS FREE OF
 *  DEFECTS, MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE OR
 *  NON-INFRINGING. THE ENTIRE RISK AS TO THE QUALITY AND
 *  PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD ANY PART
 *  OF THE PROGRAM PROVE DEFECTIVE IN ANY RESPECT, YOU
 *  (NOT JIVECAST) ASSUME THE COST OF ANY NECESSARY SERVICING,
 *  REPAIR OR CORRECTION. THIS DISCLAIMER OF WARRANTY CONSTITUTES
 *  AN ESSENTIAL PART OF THIS LICENSE. NO USE OF
 *  THE PROGRAM IS AUTHORIZED HEREUNDER EXCEPT
 *  UNDER THIS DISCLAIMER.
 *
 *  ------------------------------------------------------------------
 */

package com.jivecast.webstore.om;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.torque.criteria.Criteria;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Sat Apr 18 18:43:39 EDT 2020]
 *
 * You should add additional methods to this class to meet the application
 * requirements. This class will only be generated as long as it does not
 * already exist in the output directory.
 */

public class Item extends com.jivecast.webstore.om.BaseItem {
	/** Serial version */
	private static final long serialVersionUID = 1587249819161L;

	private static Log log = LogFactory.getLog(Item.class);

	public static Item getItemByPrimaryKey(int refId) {
		try {
			Criteria criteria = new Criteria();
			criteria.where(ItemPeer.REF_ID, refId);
			return ItemPeer.doSelectSingleRecord(criteria);
		} catch (Exception e) {
			log.error("Could not find item item: " + refId);
			return null;
		}
	}

	public String getFormattedPrice() {
		try {
			DecimalFormat df = new DecimalFormat("0.00");
			String output = "$" + df.format(this.getPrice());
			return output;
		} catch (Exception e) {
			return "$0.00";
		}
	}

	public static List<Item> getAllItems() {
		try {
			Criteria criteria = new Criteria();
			criteria.addAscendingOrderByColumn(ItemPeer.REF_ID);
			return (List<Item>) ItemPeer.doSelect(criteria);
		} catch (Exception e) {
			log.error("Error getting all items: " + e.toString());
			return null;
		}
	}

	/**
	 * Is this item linked to any orders?
	 * 
	 * @return
	 */
	public List<WebOrder> getItemOrders() {
		List<WebOrder> orders = new ArrayList<>();
		try {

			Criteria criteria = new Criteria();
			criteria.where(OrderDetailPeer.ITEM_ID, this.getRefId());
			List<OrderDetail> details = OrderDetailPeer.doSelect(criteria);
			for (OrderDetail detail : details)
				orders.add(detail.getWebOrder());

		} catch (Exception e) {
		}
		return orders;
	}

	/**
	 * Any web orders for this item?
	 * 
	 * @return
	 */
	public boolean hasOrders() {
		if (this.getItemOrders().size() > 0)
			return true;
		return false;
	}

}
