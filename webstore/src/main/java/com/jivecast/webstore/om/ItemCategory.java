/*
 *  ------------------------------------------------------------------
 *  JiveCast
 *  301 Fayetteville St Unit 2301
 *  Raleigh, NC 27601
 *  https://jivecast.com
 *
 *  Copyright (c) 2018-2025 JiveCast. All Rights Reserved.
 *
 *  THE PROGRAM IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EITHER EXPRESSED OR IMPLIED, INCLUDING, WITHOUT
 *  LIMITATION, WARRANTIES THAT THE PROGRAM IS FREE OF
 *  DEFECTS, MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE OR
 *  NON-INFRINGING. THE ENTIRE RISK AS TO THE QUALITY AND
 *  PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD ANY PART
 *  OF THE PROGRAM PROVE DEFECTIVE IN ANY RESPECT, YOU
 *  (NOT JIVECAST) ASSUME THE COST OF ANY NECESSARY SERVICING,
 *  REPAIR OR CORRECTION. THIS DISCLAIMER OF WARRANTY CONSTITUTES
 *  AN ESSENTIAL PART OF THIS LICENSE. NO USE OF
 *  THE PROGRAM IS AUTHORIZED HEREUNDER EXCEPT
 *  UNDER THIS DISCLAIMER.
 *
 *  ------------------------------------------------------------------
 */

package com.jivecast.webstore.om;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.torque.criteria.Criteria;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Sat Apr 18 18:43:39 EDT 2020]
 *
 * You should add additional methods to this class to meet the application
 * requirements. This class will only be generated as long as it does not
 * already exist in the output directory.
 */

public class ItemCategory extends com.jivecast.webstore.om.BaseItemCategory {
	/** Serial version */
	private static final long serialVersionUID = 1587249819152L;

	private static Log log = LogFactory.getLog(ItemCategory.class);

	public static ItemCategory getItemCategoryByPrimaryKey(int key) {
		try {
			Criteria criteria = new Criteria();
			criteria.where(ItemCategoryPeer.REF_ID, key);
			return ItemCategoryPeer.doSelectSingleRecord(criteria);
		} catch (Exception e) {
			log.error("Could not find item category: " + key);
			return null;
		}
	}

	/**
	 * Show newest items at the top of the list
	 * 
	 * @return
	 */
	public int getItemCount() {
		return this.getItemsWithInventory().size();
	}

	/**
	 * Show newest items at the top of the list
	 * 
	 * @return
	 */
	public List<Item> getSoldItemsToShow() {
		try {
			Criteria criteria = new Criteria();
			criteria.where(ItemPeer.CAT_ID, this.getRefId());
			criteria.where(ItemPeer.SHOW_SOLD, true);
			criteria.where(ItemPeer.QUANTITY, 0);
			criteria.addDescendingOrderByColumn(ItemPeer.REF_ID);
			return (List<Item>) ItemPeer.doSelect(criteria);
		} catch (Exception e) {
			log.error("Error getting category items: " + e.toString());
			return null;
		}
	}

	/**
	 * Show newest items at the top of the list
	 * 
	 * @return
	 */
	public List<Item> getItemsWithInventory() {
		try {
			Criteria criteria = new Criteria();
			criteria.where(ItemPeer.CAT_ID, this.getRefId());
			criteria.where(ItemPeer.QUANTITY, 0, Criteria.GREATER_THAN);
			criteria.addDescendingOrderByColumn(ItemPeer.REF_ID);
			return (List<Item>) ItemPeer.doSelect(criteria);
		} catch (Exception e) {
			log.error("Error getting category items: " + e.toString());
			return null;
		}
	}

	public List<Item> getCategoryItemsToShow() {
		List<Item> sold = this.getSoldItemsToShow();
		List<Item> not_sold = this.getItemsWithInventory();
		List<Item> all_items = new ArrayList<>();

		all_items.addAll(not_sold);
		all_items.addAll(sold);

		// randomize the order
		// Collections.shuffle(all_items);
		return all_items;

	}

	public static List<ItemCategory> getAllCategories() {
		try {
			Criteria criteria = new Criteria();
			criteria.addAscendingOrderByColumn(ItemCategoryPeer.CATEGORY_NAME);
			return (List<ItemCategory>) ItemCategoryPeer.doSelect(criteria);
		} catch (Exception e) {
			log.error("Error getting all categories: " + e.toString());
			return null;
		}
	}

}
